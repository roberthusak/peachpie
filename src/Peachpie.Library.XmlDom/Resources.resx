<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DocumentFragmentEmpty" xml:space="preserve">
    <value>Document fragment is empty</value>
  </data>
  <data name="ErrorAttributeInUse" xml:space="preserve">
    <value>Inuse Attribute Error</value>
  </data>
  <data name="ErrorBadHierarchy" xml:space="preserve">
    <value>Hierarchy Request Error</value>
  </data>
  <data name="ErrorDataNotAllowed" xml:space="preserve">
    <value>No Data Allowed Error</value>
  </data>
  <data name="ErrorDomModificationNotAllowed" xml:space="preserve">
    <value>No Modification Allowed Error</value>
  </data>
  <data name="ErrorIndexOutOfBounds" xml:space="preserve">
    <value>Index Size Error</value>
  </data>
  <data name="ErrorInvalidAccess" xml:space="preserve">
    <value>Invalid Access Error</value>
  </data>
  <data name="ErrorInvalidCharacter" xml:space="preserve">
    <value>Invalid Character Error</value>
  </data>
  <data name="ErrorInvalidState" xml:space="preserve">
    <value>Invalid State Error</value>
  </data>
  <data name="ErrorModificationNotAllowed" xml:space="preserve">
    <value>Invalid Modification Error</value>
  </data>
  <data name="ErrorNamespaceError" xml:space="preserve">
    <value>Namespace Error</value>
  </data>
  <data name="ErrorNotFound" xml:space="preserve">
    <value>Not Found Error</value>
  </data>
  <data name="ErrorNotSupported" xml:space="preserve">
    <value>Not Supported Error</value>
  </data>
  <data name="ErrorStringTooLong" xml:space="preserve">
    <value>DOM String Size Error</value>
  </data>
  <data name="ErrorSyntaxError" xml:space="preserve">
    <value>Syntax Error</value>
  </data>
  <data name="ErrorValidationError" xml:space="preserve">
    <value>Validation Error</value>
  </data>
  <data name="ErrorWrongDocument" xml:space="preserve">
    <value>Wrong Document Error</value>
  </data>
  <data name="ExsltSupportMissing" xml:space="preserve">
    <value>EXSLT support requires the Mvp.Xml library version 2.0 (assembly version 2.0.2158.1055) available at http://www.xmlmvp.org/. Insert Mvp.Xml.dll to GAC in order to enable EXSLT support.</value>
  </data>
  <data name="HandlerNotAllowed" xml:space="preserve">
    <value>Not allowed to call handler '{0}()'</value>
  </data>
  <data name="InvalidDocument" xml:space="preserve">
    <value>Invalid Document</value>
  </data>
  <data name="InvalidNodeType" xml:space="preserve">
    <value>Invalid node type</value>
  </data>
  <data name="InvalidParameterKey" xml:space="preserve">
    <value>Invalid array key (must be string)</value>
  </data>
  <data name="InvalidStateError" xml:space="preserve">
    <value>Invalid state error</value>
  </data>
  <data name="NotYetImplemented" xml:space="preserve">
    <value>Not yet implemented</value>
  </data>
  <data name="PostLoadDtdUnsupported" xml:space="preserve">
    <value>Post-load DTD schema validation is not supported</value>
  </data>
  <data name="RelaxNGUnsupported" xml:space="preserve">
    <value>RELAX NG schema validation is not supported</value>
  </data>
  <data name="SchemaCreateUnsupported" xml:space="preserve">
    <value>Default/fixed value nodes creation during XSD schema validation is not supported</value>
  </data>
  <data name="SimpleXmlAssignmentToDuplicateNodes" xml:space="preserve">
    <value>Cannot assign to an array of nodes (duplicate subnodes of name '{0}' detected)</value>
  </data>
  <data name="SimpleXmlImportNotAssociated" xml:space="preserve">
    <value>The imported node must be associated with an XML document</value>
  </data>
  <data name="SimpleXmlInvalidClassName" xml:space="preserve">
    <value>Class '{0}' is not derived from SimpleXMLElement.</value>
  </data>
  <data name="SimpleXmlInvalidNodeToImport" xml:space="preserve">
    <value>Invalid node type. Only instances of DOMElement and DOMDocument (contaning the root element) can be imported</value>
  </data>
  <data name="SimpleXmlNotImplemented" xml:space="preserve">
    <value>Cooperation with the SimpleXML extension is not implemented</value>
  </data>
  <data name="SimpleXmlUnsupportedWriteConversion" xml:space="preserve">
    <value>It is not possible to assign complex types to nodes</value>
  </data>
  <data name="XmlWritterCDataWrongContext" xml:space="preserve">
    <value>CDATA not allowed in this context!</value>
  </data>
  <data name="XmlWritterDtdInProlog" xml:space="preserve">
    <value>DTD allowed only in prolog!</value>
  </data>
  <data name="XmlWritterNumberOfBytesUnsupported" xml:space="preserve">
    <value>Obtaining the number of bytes written to the current type of stream is not supported.</value>
  </data>
  <data name="XmlWritterSystemIdentifier" xml:space="preserve">
    <value>system identifier needed!</value>
  </data>
</root>